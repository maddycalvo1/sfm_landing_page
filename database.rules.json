{
  "rules": {
    "users": {
      "$userid": {
        ".read": "!root.child('users/' + $userid + '/blocks').hasChild(auth.uid)",
        "profile": {
          ".write": "$userid == auth.uid"
        },
        "blocked": {
          
          "$blockerid": {
            ".validate": "root.child('users').hasChild($blockerid)",
            ".write": "auth.uid !== null"
          }
        },
        "blocks": {
          
          "$blockerid": {
            ".write": "$blockerid == auth.uid"
          }
        },
        "chatUsers": {
          
          "$userid": {
            ".validate": "root.child('users').hasChild($userid)",
            ".read": "$userid == auth.uid",
            ".write": "auth !== null && !root.child('users/' + auth.uid + '/blocked').hasChild($userid)"
          }
        },
        "subscription": {
          "$userid": {
            ".read": "$userid == auth.uid",
            ".write": false
          }
        },
        "following": {
          
          "$followingid": {
            ".validate": "root.child('users').hasChild($followingid)",
            ".write": "auth !== null && !root.child('users/' + auth.uid + '/blocked').hasChild($followingid)"
          }
        },
        "followers": {
          
          "$followerid": {
            ".write": "$followerid == auth.uid"
          }
        },
        "winkedAt": {
          
          "$winkedId": {
            ".validate": "root.child('users').hasChild($winkedId)",
            ".write": "auth !== null && !root.child('users/' + auth.uid + '/blocked').hasChild($winkedId)"
          }
        },
        "winks": {
         
          "$winker": {
            ".write": "$winker == auth.uid"
          }
        },
        "notifications": {
          
          "$notifier": {
            ".write": "auth.uid !== null"
          }
        },
        "feed": {
          "$sparkid": {
           
            ".write": "root.child('users/' + $userid + '/following').hasChild(auth.uid) && root.child('sparks/' + $sparkid + '/author').val() ==auth.uid"
          },
          ".indexOn": ["createdAt", "author"]
        },
        "sparks": {
          ".indexOn": "createdAt",
          ".write": "$userid == auth.uid"
        }
      }
    },
    "conversations": {
      "$conservationid": {
        ".read": "$conservationid.contains(auth.uid)",
        ".write": "auth !== null && (!root.child('users/' + auth.uid + '/blocked').hasChild($conservationid.replace('_', '').replace(auth.uid, '')) && !root.child('users/' + $conservationid.replace('_', '').replace(auth.uid, '') + '/blocks').hasChild(auth.uid))",
        "messages": {
          ".indexOn": "createdAt"
        }
      }
    },
    "presence": {
      ".read": true,
      "$userid": {
        ".read": "!root.child('users/' + $userid + '/blocks').hasChild(auth.uid)",
        ".write": "$userid == auth.uid"
      }
    },
    "sparks": {
      
      "$sparkid": {
    
        ".write": "!data.exists()",
       
        ".validate": "newData.hasChildren(['author', 'content'])",
        
        "author": {
          ".validate": "newData.val() ==auth.uid"
        },
        "content": {
          ".validate": "newData.isString()"
        },
        ".indexOn": "createdAt"
      }
    }
  }
}
